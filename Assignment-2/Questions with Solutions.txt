Assignment 2

Question 1: Binary Search

#include <stdio.h>

int main()
{
    int n1;
    int i;
    int mid;
    int searching_element;
    int position = -1;

    printf("Enter the elements you want in array: ");
    scanf("%d", &n1);

    int array[n1];

    printf("Enter the elements of array in a sorted way: \n");

    for (i = 0; i < n1; i++)
    {
        scanf("%d", &array[i]);
    }

    printf("Which element you would like to find: ");
    scanf("%d",&searching_element);

    int first = 0;
    int last = n1 - 1;

    while (first <= last)
    {

        mid = (first + last) / 2;

        if (array[mid] == searching_element)
        {
            printf("Element %d found at position: %d",searching_element,mid + 1);
            position = mid;
            break;
        }

        else if(array[mid] > searching_element) {
            last = mid-1;
        }

        else {
            first = mid+1;
        }
    }

    if (position == -1)
    {
        printf("Element %d not found!",searching_element);
    }

    return 0;
}




Enter the elements you want in array: 5
Enter the elements of array in a sorted way: 
2
3
4
5
6
Which element you would like to find: 6
Element 6 found at position: 5
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 








Question 2: Bubble Sort

#include <stdio.h>

int main()
{
    int array[50];
    int number;
    int i;
    int j;
    int temp;

    printf("Enter how many elements you would like in the array: ");
    scanf("%d", &number);

    // int array[number];

    printf("Enter the elements: \n");
    for (i = 0; i < number; i++)
    {
        scanf("%d", &array[i]);
    }

    for (i = 0; i < number-1; i++)
    {
        for (j = 0; j < number - i - 1; j++)
        {
            if (array[j] > array[j + 1])
            {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }

    printf("The sorted array is:   ");

    for (i = 0; i < number; i++)
    {
        printf("%d  ", array[i]);
    }
    return 0;
}





Enter how many elements you would like in the array: 7
Enter the elements: 
64
34
25
12
22
11
90
The sorted array is:   11  12  22  25  34  64  90  
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 




Question 3: Missing Number

#include <stdio.h>

int findMissingNumber(int arr[], int n)
{
    int first = arr[0];
    int last = arr[n-1];

    int expected_sum = (last * (last + 1)) / 2 - ((first - 1) * first) / 2;

    int actual_sum = 0;
    for (int i = 0; i < n; i++) {
        actual_sum += arr[i];
    }

    return expected_sum - actual_sum;
}

int main()
{
    int size;
    printf("Enter the number of elements: ");
    scanf("%d", &size);

    int arr[size];
    printf("Enter the elements:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    int missing = findMissingNumber(arr, size);
    printf("Missing number is: %d\n", missing);

    return 0;
}




Enter the number of elements: 5
Enter the elements:
2
3
5
6
7
Missing number is: 4
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 





Question 4: String Related

(i) Concatinate

#include <stdio.h>
#include <string.h>

int main()
{
    char str1[100], str2[100];

    printf("Enter first string: ");
    gets(str1);
    printf("Enter second string: ");
    gets(str2);

    strcat(str1, str2);
    printf("Concatenated string: %s\n", str1);
    return 0;
}



Enter first string: Hello i am
Enter second string: Yuvraj Malik
Concatenated string: Hello i amYuvraj Malik
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 




(ii) Reverse

#include <stdio.h>
#include <string.h>

int main()
{
    char str[100], rev[100];
    int i, len;

    printf("Enter a string: ");
    gets(str);

    len = strlen(str);

    for (i = 0; i < len; i++)
    {
        rev[i] = str[len - i - 1];
    }
    rev[len] = '\0';

    printf("Reversed string: %s\n", rev);
    return 0;
}


Enter a string: Yuvraj
Reversed string: jarvuY
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 





(iii) Delete Vowels

#include <stdio.h>
#include <string.h>

int main()
{
    char str[100], result[100];
    int i, j = 0;

    printf("Enter a string: ");
    gets(str);

    for (i = 0; str[i] != '\0'; i++)
    {
        if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u' &&
            str[i] != 'A' && str[i] != 'E' && str[i] != 'I' && str[i] != 'O' && str[i] != 'U')
        {
            result[j++] = str[i];
        }
    }
    result[j] = '\0';

    printf("String after deleting vowels: %s\n", result);
    return 0;
}




Enter a string: Yuvraj
String after deleting vowels: Yvrj
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 





(iv) Sorting The String

#include <stdio.h>
#include <string.h>

int main()
{
    char str[10][50], temp[50];
    int i, j, n;

    printf("Enter number of strings: ");
    scanf("%d", &n);
    getchar();

    printf("Enter %d strings:\n", n);
    for (i = 0; i < n; i++)
    {
        gets(str[i]);
    }

   
    for (i = 0; i < n - 1; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (strcmp(str[i], str[j]) > 0)
            {
                strcpy(temp, str[i]);
                strcpy(str[i], str[j]);
                strcpy(str[j], temp);
            }
        }
    }

    printf("\nStrings in alphabetical order:\n");
    for (i = 0; i < n; i++)
    {
        printf("%s\n", str[i]);
    }
    return 0;
}




Enter number of strings: 2
Enter 2 strings:
Hello 
Abcd

Strings in alphabetical order:
Abcd
Hello
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 




(v) Convert Case

#include <stdio.h>

int main()
{
    char ch;

    printf("Enter an uppercase character: ");
    scanf("%c", &ch);

    if (ch >= 'A' && ch <= 'Z')
    {
        ch = ch + 32;
    }

    printf("Lowercase character: %c\n", ch);
    return 0;
}



Enter an uppercase character: H
Lowercase character: h
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 







Question 5: Space Related

(i) Diagonal Matrix

#include <stdio.h>

void setDiagonal(int diag[], int n, int i, int x)
{
    if (i >= 0 && i < n)
    {
        diag[i] = x;
    }
}

int getDiagonal(int diag[], int n, int i, int j)
{
    if (i == j)
        return diag[i];
    else
        return 0;
}

int main()
{
    int n = 4;
    int diag[4] = {0};

    setDiagonal(diag, n, 0, 5);
    setDiagonal(diag, n, 1, 8);
    setDiagonal(diag, n, 2, 3);
    setDiagonal(diag, n, 3, 6);

    printf("Diagonal Matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("%d ", getDiagonal(diag, n, i, j));
        }
        printf("\n");
    }
}




Diagonal Matrix:
5 0 0 0 
0 8 0 0 
0 0 3 0 
0 0 0 6 
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 



(ii) Tri-Diagonal Matrix


#include <stdio.h>

void setTriDiagonal(int tri[], int n, int i, int j, int x)
{
    if (i == j)
        tri[i] = x;
    else if (i == j + 1)
        tri[n + j] = x;
    else if (i + 1 == j)
        tri[2 * n - 1 + i] = x;
}

int getTriDiagonal(int tri[], int n, int i, int j)
{
    if (i == j)
        return tri[i];
    else if (i == j + 1)
        return tri[n + j];
    else if (i + 1 == j)
        return tri[2 * n - 1 + i];
    else
        return 0;
}

int main()
{
    int n = 4;
    int tri[3 * 4 - 2] = {0};

    setTriDiagonal(tri, n, 0, 0, 1);
    setTriDiagonal(tri, n, 1, 0, 2);
    setTriDiagonal(tri, n, 1, 1, 3);
    setTriDiagonal(tri, n, 2, 1, 4);
    setTriDiagonal(tri, n, 2, 2, 5);
    setTriDiagonal(tri, n, 3, 2, 6);
    setTriDiagonal(tri, n, 3, 3, 7);

    printf("Tri-diagonal Matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("%d ", getTriDiagonal(tri, n, i, j));
        }
        printf("\n");
    }
}



Tri-diagonal Matrix:
1 0 0 0 
2 3 0 0 
0 4 5 0 
0 0 6 7 



(iii) Lower Triangle Matrix

#include <stdio.h>

int indexLower(int i, int j)
{
    return (i * (i + 1)) / 2 + j;
}

void setLower(int lower[], int n, int i, int j, int x)
{
    if (i >= j)
        lower[indexLower(i, j)] = x;
}

int getLower(int lower[], int n, int i, int j)
{
    if (i >= j)
        return lower[indexLower(i, j)];
    else
        return 0;
}

int main()
{
    int n = 4;
    int size = n * (n + 1) / 2;
    int lower[size];

    for (int i = 0; i < size; i++)
        lower[i] = 0;

    setLower(lower, n, 0, 0, 1);
    setLower(lower, n, 1, 0, 2);
    setLower(lower, n, 1, 1, 3);
    setLower(lower, n, 2, 0, 4);
    setLower(lower, n, 2, 1, 5);
    setLower(lower, n, 2, 2, 6);
    setLower(lower, n, 3, 0, 7);
    setLower(lower, n, 3, 1, 8);
    setLower(lower, n, 3, 2, 9);
    setLower(lower, n, 3, 3, 10);

    printf("Lower Triangular Matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("%d ", getLower(lower, n, i, j));
        }
        printf("\n");
    }

    return 0;
}



Lower Triangular Matrix:
1 0 0 0 
2 3 0 0 
4 5 6 0 
7 8 9 10 
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 



(iv) Upper Triangle Matrix


#include <stdio.h>

int indexUpper(int i, int j, int n)
{
    return (i * n - (i * (i - 1)) / 2) + (j - i);
}

void setUpper(int upper[], int n, int i, int j, int x)
{
    if (i <= j)
        upper[indexUpper(i, j, n)] = x;
}

int getUpper(int upper[], int n, int i, int j)
{
    if (i <= j)
        return upper[indexUpper(i, j, n)];
    else
        return 0;
}

int main()
{
    int n = 4;
    int size = n * (n + 1) / 2;
    int upper[size];

    for (int i = 0; i < size; i++)
        upper[i] = 0;

    setUpper(upper, n, 0, 0, 1);
    setUpper(upper, n, 0, 1, 2);
    setUpper(upper, n, 0, 2, 3);
    setUpper(upper, n, 0, 3, 4);
    setUpper(upper, n, 1, 1, 5);
    setUpper(upper, n, 1, 2, 6);
    setUpper(upper, n, 1, 3, 7);
    setUpper(upper, n, 2, 2, 8);
    setUpper(upper, n, 2, 3, 9);
    setUpper(upper, n, 3, 3, 10);

    printf("Upper Triangular Matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("%d ", getUpper(upper, n, i, j));
        }
        printf("\n");
    }

    return 0;
}


Upper Triangular Matrix:
1 2 3 4 
0 5 6 7 
0 0 8 9 
0 0 0 10 
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 




(v) Symmetric Matrix


#include <stdio.h>

int indexSym(int i, int j)
{
    return (i * (i + 1)) / 2 + j;
}

void setSymmetric(int sym[], int n, int i, int j, int x)
{
    if (i >= j)
        sym[indexSym(i, j)] = x;
    else
        sym[indexSym(j, i)] = x;
}

int getSymmetric(int sym[], int n, int i, int j)
{
    if (i >= j)
        return sym[indexSym(i, j)];
    else
        return sym[indexSym(j, i)];
}

int main()
{
    int n = 4;
    int size = n * (n + 1) / 2;
    int sym[size];

    for (int i = 0; i < size; i++)
        sym[i] = 0;

    setSymmetric(sym, n, 0, 0, 1);
    setSymmetric(sym, n, 1, 0, 2);
    setSymmetric(sym, n, 1, 1, 3);
    setSymmetric(sym, n, 2, 0, 4);
    setSymmetric(sym, n, 2, 1, 5);
    setSymmetric(sym, n, 2, 2, 6);
    setSymmetric(sym, n, 3, 0, 7);
    setSymmetric(sym, n, 3, 1, 8);
    setSymmetric(sym, n, 3, 2, 9);
    setSymmetric(sym, n, 3, 3, 10);

    printf("Symmetric Matrix:\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("%d ", getSymmetric(sym, n, i, j));
        }
        printf("\n");
    }

    return 0;
}



Symmetric Matrix:
1 2 4 7 
2 3 5 8 
4 5 6 9 
7 8 9 10 
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 






Question 6: Sparse Matrix


#include <stdio.h>

#define MAX 100

// Function to read sparse matrix
void readSparse(int sparse[MAX][3])
{
    int rows, cols, n;
    printf("Enter rows, cols and number of non-zero elements: ");
    scanf("%d %d %d", &rows, &cols, &n);

    sparse[0][0] = rows;
    sparse[0][1] = cols;
    sparse[0][2] = n;

    printf("Enter row, column and value of non-zero elements (positions start from 1, not index 0):\n");
    for (int i = 1; i <= n; i++)
    {
        int r, c, v;
        scanf("%d %d %d", &r, &c, &v);

        if (r < 1 || r > rows || c < 1 || c > cols)
        {
            printf("Error: Invalid entry (%d,%d). Must be within matrix size %dx%d. Please re-enter:\n",
                   r, c, rows, cols);
            i--; // retry this element
            continue;
        }

        sparse[i][0] = r;
        sparse[i][1] = c;
        sparse[i][2] = v;
    }
}

// Function to print sparse matrix
void printSparse(int sparse[MAX][3])
{
    int n = sparse[0][2];
    printf("Meta Info: Rows=%d, Cols=%d, Non-zeros=%d\n", sparse[0][0], sparse[0][1], n);
    printf("Row\tCol\tVal\n");
    for (int i = 1; i <= n; i++)
    {
        printf("%d\t%d\t%d\n", sparse[i][0], sparse[i][1], sparse[i][2]);
    }
}

// Transpose of sparse matrix
void transposeSparse(int a[MAX][3], int b[MAX][3])
{
    int n = a[0][2];
    b[0][0] = a[0][1];
    b[0][1] = a[0][0];
    b[0][2] = n;

    int k = 1;
    for (int col = 1; col <= a[0][1]; col++)
    {
        for (int i = 1; i <= n; i++)
        {
            if (a[i][1] == col)
            {
                b[k][0] = a[i][1];
                b[k][1] = a[i][0];
                b[k][2] = a[i][2];
                k++;
            }
        }
    }
}

// Addition of two sparse matrices
void addSparse(int a[MAX][3], int b[MAX][3], int c[MAX][3])
{
    if (a[0][0] != b[0][0] || a[0][1] != b[0][1])
    {
        printf("❌ Error: Addition not possible. Dimensions mismatch.\n");
        c[0][2] = 0;
        return;
    }

    int i = 1, j = 1, k = 1;
    c[0][0] = a[0][0];
    c[0][1] = a[0][1];

    while (i <= a[0][2] && j <= b[0][2])
    {
        if (a[i][0] < b[j][0] || (a[i][0] == b[j][0] && a[i][1] < b[j][1]))
        {
            c[k][0] = a[i][0];
            c[k][1] = a[i][1];
            c[k][2] = a[i][2];
            i++;
        }
        else if (b[j][0] < a[i][0] || (b[j][0] == a[i][0] && b[j][1] < a[i][1]))
        {
            c[k][0] = b[j][0];
            c[k][1] = b[j][1];
            c[k][2] = b[j][2];
            j++;
        }
        else
        {
            c[k][0] = a[i][0];
            c[k][1] = a[i][1];
            c[k][2] = a[i][2] + b[j][2];
            i++;
            j++;
        }
        k++;
    }

    while (i <= a[0][2])
    {
        c[k][0] = a[i][0];
        c[k][1] = a[i][1];
        c[k][2] = a[i][2];
        i++;
        k++;
    }

    while (j <= b[0][2])
    {
        c[k][0] = b[j][0];
        c[k][1] = b[j][1];
        c[k][2] = b[j][2];
        j++;
        k++;
    }

    c[0][2] = k - 1;
}

// Multiplication of two sparse matrices
void multiplySparse(int a[MAX][3], int b[MAX][3], int c[MAX][3])
{
    if (a[0][1] != b[0][0])
    {
        printf("❌ Error: Multiplication not possible. Dimensions mismatch.\n");
        c[0][2] = 0;
        return;
    }

    int temp[MAX][MAX] = {0};

    for (int i = 1; i <= a[0][2]; i++)
    {
        for (int j = 1; j <= b[0][2]; j++)
        {
            if (a[i][1] == b[j][0])
            {
                temp[a[i][0]][b[j][1]] += a[i][2] * b[j][2];
            }
        }
    }

    int k = 1;
    c[0][0] = a[0][0];
    c[0][1] = b[0][1];
    for (int i = 1; i <= a[0][0]; i++)
    {
        for (int j = 1; j <= b[0][1]; j++)
        {
            if (temp[i][j] != 0)
            {
                c[k][0] = i;
                c[k][1] = j;
                c[k][2] = temp[i][j];
                k++;
            }
        }
    }
    c[0][2] = k - 1;
}

int main()
{
    int a[MAX][3], b[MAX][3], trans[MAX][3], sum[MAX][3], product[MAX][3];

    printf("Enter first sparse matrix:\n");
    readSparse(a);
    printSparse(a);

    printf("\nTranspose of first matrix:\n");
    transposeSparse(a, trans);
    printSparse(trans);

    printf("\nEnter second sparse matrix:\n");
    readSparse(b);
    printSparse(b);

    printf("\nAddition of two matrices:\n");
    addSparse(a, b, sum);
    printSparse(sum);

    printf("\nMultiplication of two matrices:\n");
    multiplySparse(a, b, product);
    printSparse(product);

    return 0;
}







Enter first sparse matrix:
Enter rows, cols and number of non-zero elements: 2
2
2
Enter row, column and value of non-zero elements (positions start from 1, not index 0):
1 1 1
2 2 2
Meta Info: Rows=2, Cols=2, Non-zeros=2
Row     Col     Val
1       1       1
2       2       2

Transpose of first matrix:
Meta Info: Rows=2, Cols=2, Non-zeros=2
Row     Col     Val
1       1       1
2       2       2

Enter second sparse matrix:
Enter rows, cols and number of non-zero elements: 2
2
1
Enter row, column and value of non-zero elements (positions start from 1, not index 0):
1 1 3
Meta Info: Rows=2, Cols=2, Non-zeros=1
Row     Col     Val
1       1       3

Addition of two matrices:
Meta Info: Rows=2, Cols=2, Non-zeros=2
Row     Col     Val
1       1       4
2       2       2

Multiplication of two matrices:
Meta Info: Rows=2, Cols=2, Non-zeros=1
Row     Col     Val
1       1       3
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 






Question 7: Inversion


#include <stdio.h>


long long mergeAndCount(int arr[], int temp[], int left, int mid, int right)
{
    int i = left;    // left subarray index
    int j = mid + 1; // right subarray index
    int k = left;    // temp array index
    long long inv_count = 0;

    while ((i <= mid) && (j <= right))
    {
        if (arr[i] <= arr[j])
        {
            temp[k++] = arr[i++];
        }
        else
        {
            temp[k++] = arr[j++];
            // All remaining elements in left-subarray are greater than arr[j]
            inv_count += (mid - i + 1);
        }
    }

    // Copy remaining elements
    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];

    // Copy back to original array
    for (i = left; i <= right; i++)
        arr[i] = temp[i];

    return inv_count;
}


long long mergeSortAndCount(int arr[], int temp[], int left, int right)
{
    long long inv_count = 0;
    if (left < right)
    {
        int mid = (left + right) / 2;

        inv_count += mergeSortAndCount(arr, temp, left, mid);
        inv_count += mergeSortAndCount(arr, temp, mid + 1, right);

        inv_count += mergeAndCount(arr, temp, left, mid, right);
    }
    return inv_count;
}

int main()
{
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n], temp[n];
    printf("Enter array elements:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    long long result = mergeSortAndCount(arr, temp, 0, n - 1);
    printf("Number of inversions: %lld\n", result);

    return 0;
}




Enter number of elements: 5
Enter array elements:
8
5
7
4
3
Number of inversions: 9
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 







Question 8: Distinct Elements

#include <stdio.h>

int countDistinctAndDisplay(int arr[], int n)
{
    int count = 0;

    printf("Distinct elements are: ");
    for (int i = 0; i < n; i++)
    {
        int isDistinct = 1;

        for (int j = 0; j < i; j++)
        {
            if (arr[i] == arr[j])
            {
                isDistinct = 0;
                break;
            }
        }

        if (isDistinct)
        {
            printf("%d ", arr[i]);
            count++;
        }
    }
    printf("\n");

    return count;
}

int main()
{
    int n;

    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements: ", n);
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    int distinctCount = countDistinctAndDisplay(arr, n);
    printf("Total number of distinct elements: %d\n", distinctCount);

    return 0;
}



Enter the size of the array: 5
Enter 5 elements: 3 
3
4 
4
5
Distinct elements are: 3 4 5 
Total number of distinct elements: 3
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 



Extra Questions:
Saddle point


#include <stdio.h>
int main()
{
    int arr[10][10], rows, columns, i, j;
    printf("Enter number of rows: ");
    scanf("%d", &rows);

    printf("Enter number of columns: ");
    scanf("%d", &columns);

    for (i = 0; i < rows; i++)
    {
        printf("\nEnter the elements for row number %d\n", i + 1);
        for (j = 0; j < columns; j++)
        {
            scanf("%d", &arr[i][j]);
        }
    }

    printf("\nThe matrix formed is: \n");
    for (i = 0; i < rows; i++)
    {
        printf("\n");
        for (j = 0; j < columns; j++)
        {
            printf("%d\t", arr[i][j]);
        }
        printf("\n");
    }

    int found = 0;

    // Find saddle points
    for (i = 0; i < rows; i++)
    {
        // Step 1: Find the minimum element in this row
        int rowMin = arr[i][0];
        int colIndex = 0;
        for (j = 1; j < columns; j++)
        {
            if (arr[i][j] < rowMin)
            {
                rowMin = arr[i][j];
                colIndex = j;
            }
        }

        // Step 2: Check if this row minimum is the maximum in its column
        int isSaddle = 1;
        for (int k = 0; k < rows; k++)
        {
            if (arr[k][colIndex] > rowMin)
            {
                isSaddle = 0;
                break;
            }
        }

        if (isSaddle)
        {
            printf("\nSaddle point found at Row %d, Column %d = %d\n", i + 1, colIndex + 1, rowMin);
            found = 1;
        }
    }

    if (!found)
    {
        printf("\nNo Saddle Point exists in the matrix.\n");
    }

    return 0;
}




Enter number of rows: 2
Enter number of columns: 2

Enter the elements for row number 1
1
2

Enter the elements for row number 2
2
3

The matrix formed is: 

1       2

2       3

Saddle point found at Row 2, Column 1 = 2
PS C:\Users\Yuvraj Malik\OneDrive\Desktop\My Porgrams\2C41> 